// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: orderer/ab.proto

package orderer

import (
	context "context"
	common "github.com/hyperledger/fabric-protos-go-apiv2/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	AtomicBroadcast_Broadcast_FullMethodName = "/orderer.AtomicBroadcast/Broadcast"
	AtomicBroadcast_Deliver_FullMethodName   = "/orderer.AtomicBroadcast/Deliver"
)

// AtomicBroadcastClient is the client API for AtomicBroadcast service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AtomicBroadcastClient interface {
	// broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure
	Broadcast(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, BroadcastResponse], error)
	// deliver first requires an Envelope of type DELIVER_SEEK_INFO with Payload data as a mashaled SeekInfo message, then a stream of block replies is received.
	Deliver(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, DeliverResponse], error)
}

type atomicBroadcastClient struct {
	cc grpc.ClientConnInterface
}

func NewAtomicBroadcastClient(cc grpc.ClientConnInterface) AtomicBroadcastClient {
	return &atomicBroadcastClient{cc}
}

func (c *atomicBroadcastClient) Broadcast(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, BroadcastResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AtomicBroadcast_ServiceDesc.Streams[0], AtomicBroadcast_Broadcast_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Envelope, BroadcastResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AtomicBroadcast_BroadcastClient = grpc.BidiStreamingClient[common.Envelope, BroadcastResponse]

func (c *atomicBroadcastClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, DeliverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &AtomicBroadcast_ServiceDesc.Streams[1], AtomicBroadcast_Deliver_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Envelope, DeliverResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AtomicBroadcast_DeliverClient = grpc.BidiStreamingClient[common.Envelope, DeliverResponse]

// AtomicBroadcastServer is the server API for AtomicBroadcast service.
// All implementations should embed UnimplementedAtomicBroadcastServer
// for forward compatibility.
type AtomicBroadcastServer interface {
	// broadcast receives a reply of Acknowledgement for each common.Envelope in order, indicating success or type of failure
	Broadcast(grpc.BidiStreamingServer[common.Envelope, BroadcastResponse]) error
	// deliver first requires an Envelope of type DELIVER_SEEK_INFO with Payload data as a mashaled SeekInfo message, then a stream of block replies is received.
	Deliver(grpc.BidiStreamingServer[common.Envelope, DeliverResponse]) error
}

// UnimplementedAtomicBroadcastServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedAtomicBroadcastServer struct{}

func (UnimplementedAtomicBroadcastServer) Broadcast(grpc.BidiStreamingServer[common.Envelope, BroadcastResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedAtomicBroadcastServer) Deliver(grpc.BidiStreamingServer[common.Envelope, DeliverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}
func (UnimplementedAtomicBroadcastServer) testEmbeddedByValue() {}

// UnsafeAtomicBroadcastServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AtomicBroadcastServer will
// result in compilation errors.
type UnsafeAtomicBroadcastServer interface {
	mustEmbedUnimplementedAtomicBroadcastServer()
}

func RegisterAtomicBroadcastServer(s grpc.ServiceRegistrar, srv AtomicBroadcastServer) {
	// If the following call pancis, it indicates UnimplementedAtomicBroadcastServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&AtomicBroadcast_ServiceDesc, srv)
}

func _AtomicBroadcast_Broadcast_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtomicBroadcastServer).Broadcast(&grpc.GenericServerStream[common.Envelope, BroadcastResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AtomicBroadcast_BroadcastServer = grpc.BidiStreamingServer[common.Envelope, BroadcastResponse]

func _AtomicBroadcast_Deliver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(AtomicBroadcastServer).Deliver(&grpc.GenericServerStream[common.Envelope, DeliverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type AtomicBroadcast_DeliverServer = grpc.BidiStreamingServer[common.Envelope, DeliverResponse]

// AtomicBroadcast_ServiceDesc is the grpc.ServiceDesc for AtomicBroadcast service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AtomicBroadcast_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "orderer.AtomicBroadcast",
	HandlerType: (*AtomicBroadcastServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Broadcast",
			Handler:       _AtomicBroadcast_Broadcast_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "Deliver",
			Handler:       _AtomicBroadcast_Deliver_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "orderer/ab.proto",
}
