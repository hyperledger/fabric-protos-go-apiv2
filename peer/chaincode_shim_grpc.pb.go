// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: peer/chaincode_shim.proto

package peer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ChaincodeSupport_Register_FullMethodName = "/protos.ChaincodeSupport/Register"
)

// ChaincodeSupportClient is the client API for ChaincodeSupport service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Interface that provides support to chaincode execution. ChaincodeContext
// provides the context necessary for the server to respond appropriately.
type ChaincodeSupportClient interface {
	Register(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaincodeMessage, ChaincodeMessage], error)
}

type chaincodeSupportClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeSupportClient(cc grpc.ClientConnInterface) ChaincodeSupportClient {
	return &chaincodeSupportClient{cc}
}

func (c *chaincodeSupportClient) Register(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaincodeMessage, ChaincodeMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &ChaincodeSupport_ServiceDesc.Streams[0], ChaincodeSupport_Register_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChaincodeMessage, ChaincodeMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChaincodeSupport_RegisterClient = grpc.BidiStreamingClient[ChaincodeMessage, ChaincodeMessage]

// ChaincodeSupportServer is the server API for ChaincodeSupport service.
// All implementations should embed UnimplementedChaincodeSupportServer
// for forward compatibility.
//
// Interface that provides support to chaincode execution. ChaincodeContext
// provides the context necessary for the server to respond appropriately.
type ChaincodeSupportServer interface {
	Register(grpc.BidiStreamingServer[ChaincodeMessage, ChaincodeMessage]) error
}

// UnimplementedChaincodeSupportServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChaincodeSupportServer struct{}

func (UnimplementedChaincodeSupportServer) Register(grpc.BidiStreamingServer[ChaincodeMessage, ChaincodeMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedChaincodeSupportServer) testEmbeddedByValue() {}

// UnsafeChaincodeSupportServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChaincodeSupportServer will
// result in compilation errors.
type UnsafeChaincodeSupportServer interface {
	mustEmbedUnimplementedChaincodeSupportServer()
}

func RegisterChaincodeSupportServer(s grpc.ServiceRegistrar, srv ChaincodeSupportServer) {
	// If the following call pancis, it indicates UnimplementedChaincodeSupportServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ChaincodeSupport_ServiceDesc, srv)
}

func _ChaincodeSupport_Register_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChaincodeSupportServer).Register(&grpc.GenericServerStream[ChaincodeMessage, ChaincodeMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type ChaincodeSupport_RegisterServer = grpc.BidiStreamingServer[ChaincodeMessage, ChaincodeMessage]

// ChaincodeSupport_ServiceDesc is the grpc.ServiceDesc for ChaincodeSupport service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ChaincodeSupport_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.ChaincodeSupport",
	HandlerType: (*ChaincodeSupportServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Register",
			Handler:       _ChaincodeSupport_Register_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer/chaincode_shim.proto",
}

const (
	Chaincode_Connect_FullMethodName = "/protos.Chaincode/Connect"
)

// ChaincodeClient is the client API for Chaincode service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Chaincode as a server - peer establishes a connection to the chaincode as a client
// Currently only supports a stream connection.
type ChaincodeClient interface {
	Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaincodeMessage, ChaincodeMessage], error)
}

type chaincodeClient struct {
	cc grpc.ClientConnInterface
}

func NewChaincodeClient(cc grpc.ClientConnInterface) ChaincodeClient {
	return &chaincodeClient{cc}
}

func (c *chaincodeClient) Connect(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[ChaincodeMessage, ChaincodeMessage], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Chaincode_ServiceDesc.Streams[0], Chaincode_Connect_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[ChaincodeMessage, ChaincodeMessage]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chaincode_ConnectClient = grpc.BidiStreamingClient[ChaincodeMessage, ChaincodeMessage]

// ChaincodeServer is the server API for Chaincode service.
// All implementations should embed UnimplementedChaincodeServer
// for forward compatibility.
//
// Chaincode as a server - peer establishes a connection to the chaincode as a client
// Currently only supports a stream connection.
type ChaincodeServer interface {
	Connect(grpc.BidiStreamingServer[ChaincodeMessage, ChaincodeMessage]) error
}

// UnimplementedChaincodeServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedChaincodeServer struct{}

func (UnimplementedChaincodeServer) Connect(grpc.BidiStreamingServer[ChaincodeMessage, ChaincodeMessage]) error {
	return status.Errorf(codes.Unimplemented, "method Connect not implemented")
}
func (UnimplementedChaincodeServer) testEmbeddedByValue() {}

// UnsafeChaincodeServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ChaincodeServer will
// result in compilation errors.
type UnsafeChaincodeServer interface {
	mustEmbedUnimplementedChaincodeServer()
}

func RegisterChaincodeServer(s grpc.ServiceRegistrar, srv ChaincodeServer) {
	// If the following call pancis, it indicates UnimplementedChaincodeServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Chaincode_ServiceDesc, srv)
}

func _Chaincode_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ChaincodeServer).Connect(&grpc.GenericServerStream[ChaincodeMessage, ChaincodeMessage]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Chaincode_ConnectServer = grpc.BidiStreamingServer[ChaincodeMessage, ChaincodeMessage]

// Chaincode_ServiceDesc is the grpc.ServiceDesc for Chaincode service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Chaincode_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Chaincode",
	HandlerType: (*ChaincodeServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Chaincode_Connect_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer/chaincode_shim.proto",
}
