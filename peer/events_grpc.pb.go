// Copyright the Hyperledger Fabric contributors. All rights reserved.
//
// SPDX-License-Identifier: Apache-2.0

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             (unknown)
// source: peer/events.proto

package peer

import (
	context "context"
	common "github.com/hyperledger/fabric-protos-go-apiv2/common"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	Deliver_Deliver_FullMethodName                = "/protos.Deliver/Deliver"
	Deliver_DeliverFiltered_FullMethodName        = "/protos.Deliver/DeliverFiltered"
	Deliver_DeliverWithPrivateData_FullMethodName = "/protos.Deliver/DeliverWithPrivateData"
)

// DeliverClient is the client API for Deliver service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DeliverClient interface {
	// Deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with
	// Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of block replies is received
	Deliver(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, DeliverResponse], error)
	// DeliverFiltered first requires an Envelope of type ab.DELIVER_SEEK_INFO with
	// Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of **filtered** block replies is received
	DeliverFiltered(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, DeliverResponse], error)
	// DeliverWithPrivateData first requires an Envelope of type ab.DELIVER_SEEK_INFO with
	// Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of block and private data replies is received
	DeliverWithPrivateData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, DeliverResponse], error)
}

type deliverClient struct {
	cc grpc.ClientConnInterface
}

func NewDeliverClient(cc grpc.ClientConnInterface) DeliverClient {
	return &deliverClient{cc}
}

func (c *deliverClient) Deliver(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, DeliverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Deliver_ServiceDesc.Streams[0], Deliver_Deliver_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Envelope, DeliverResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Deliver_DeliverClient = grpc.BidiStreamingClient[common.Envelope, DeliverResponse]

func (c *deliverClient) DeliverFiltered(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, DeliverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Deliver_ServiceDesc.Streams[1], Deliver_DeliverFiltered_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Envelope, DeliverResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Deliver_DeliverFilteredClient = grpc.BidiStreamingClient[common.Envelope, DeliverResponse]

func (c *deliverClient) DeliverWithPrivateData(ctx context.Context, opts ...grpc.CallOption) (grpc.BidiStreamingClient[common.Envelope, DeliverResponse], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &Deliver_ServiceDesc.Streams[2], Deliver_DeliverWithPrivateData_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[common.Envelope, DeliverResponse]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Deliver_DeliverWithPrivateDataClient = grpc.BidiStreamingClient[common.Envelope, DeliverResponse]

// DeliverServer is the server API for Deliver service.
// All implementations should embed UnimplementedDeliverServer
// for forward compatibility.
type DeliverServer interface {
	// Deliver first requires an Envelope of type ab.DELIVER_SEEK_INFO with
	// Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of block replies is received
	Deliver(grpc.BidiStreamingServer[common.Envelope, DeliverResponse]) error
	// DeliverFiltered first requires an Envelope of type ab.DELIVER_SEEK_INFO with
	// Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of **filtered** block replies is received
	DeliverFiltered(grpc.BidiStreamingServer[common.Envelope, DeliverResponse]) error
	// DeliverWithPrivateData first requires an Envelope of type ab.DELIVER_SEEK_INFO with
	// Payload data as a marshaled orderer.SeekInfo message,
	// then a stream of block and private data replies is received
	DeliverWithPrivateData(grpc.BidiStreamingServer[common.Envelope, DeliverResponse]) error
}

// UnimplementedDeliverServer should be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedDeliverServer struct{}

func (UnimplementedDeliverServer) Deliver(grpc.BidiStreamingServer[common.Envelope, DeliverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method Deliver not implemented")
}
func (UnimplementedDeliverServer) DeliverFiltered(grpc.BidiStreamingServer[common.Envelope, DeliverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeliverFiltered not implemented")
}
func (UnimplementedDeliverServer) DeliverWithPrivateData(grpc.BidiStreamingServer[common.Envelope, DeliverResponse]) error {
	return status.Errorf(codes.Unimplemented, "method DeliverWithPrivateData not implemented")
}
func (UnimplementedDeliverServer) testEmbeddedByValue() {}

// UnsafeDeliverServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DeliverServer will
// result in compilation errors.
type UnsafeDeliverServer interface {
	mustEmbedUnimplementedDeliverServer()
}

func RegisterDeliverServer(s grpc.ServiceRegistrar, srv DeliverServer) {
	// If the following call pancis, it indicates UnimplementedDeliverServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&Deliver_ServiceDesc, srv)
}

func _Deliver_Deliver_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeliverServer).Deliver(&grpc.GenericServerStream[common.Envelope, DeliverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Deliver_DeliverServer = grpc.BidiStreamingServer[common.Envelope, DeliverResponse]

func _Deliver_DeliverFiltered_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeliverServer).DeliverFiltered(&grpc.GenericServerStream[common.Envelope, DeliverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Deliver_DeliverFilteredServer = grpc.BidiStreamingServer[common.Envelope, DeliverResponse]

func _Deliver_DeliverWithPrivateData_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(DeliverServer).DeliverWithPrivateData(&grpc.GenericServerStream[common.Envelope, DeliverResponse]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type Deliver_DeliverWithPrivateDataServer = grpc.BidiStreamingServer[common.Envelope, DeliverResponse]

// Deliver_ServiceDesc is the grpc.ServiceDesc for Deliver service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Deliver_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Deliver",
	HandlerType: (*DeliverServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Deliver",
			Handler:       _Deliver_Deliver_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeliverFiltered",
			Handler:       _Deliver_DeliverFiltered_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
		{
			StreamName:    "DeliverWithPrivateData",
			Handler:       _Deliver_DeliverWithPrivateData_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "peer/events.proto",
}
